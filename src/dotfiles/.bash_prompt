#!/usr/bin/env bash
# shellcheck disable=SC1117

# bash_prompt
#
# creates a more useful bash prompt with git support
# --------

# colors

reset=$(tput sgr0)
bold=$(tput bold)
blue=$(tput setaf 33)
cyan=$(tput setaf 37)
green=$(tput setaf 64)
orange=$(tput setaf 166)
pink=$(tput setaf 5)
red=$(tput setaf 124)
violet=$(tput setaf 61)
white=$(tput setaf 15)
yellow=$(tput setaf 136)

# other variables

user_color="$red"
host_color="$orange"
dir_color="$yellow"
branch_color="$pink"
diff_color="$cyan"
time_color="$violet"
virtualenv_color="$blue"

# git diff

function git_branch() {
    local br

    br="$(__git_ps1 | tr -d '()')"

    if [ -n "$br" ]; then
        echo " on\[${bold}\]\[${branch_color}\]$br"
    fi
}

function git_untracked() {
    local num

    num="$(git status --porcelain 2> /dev/null | grep -c "^??")"

    if [ "$num" -eq 0 ]; then
        return 0
    fi

    return 1
}

function git_ahead() {
    local branch
    local remote_exists
    local num

    branch="$(git name-rev --name-only HEAD 2> /dev/null)"

    # shellcheck disable=SC2034
    remote_exists=$(git rev-parse --verify --quiet origin/"$branch")

    # shellcheck disable=SC2181
    if [ "$?" == "0" ]; then
        num=$(git log origin/"$branch".."$branch" --oneline | wc -l)
        echo "$num"
    else
        echo 0
    fi
}

function git_behind() {
    local branch
    local remote_exists
    local num

    branch="$(git name-rev --name-only HEAD 2> /dev/null)"

    # shellcheck disable=SC2034
    remote_exists=$(git rev-parse --verify --quiet origin/"$branch")

    # shellcheck disable=SC2181
    if [ "$?" == "0" ]; then
        num=$(git log "$branch"..origin/"$branch" --oneline | wc -l)
        echo "$num"
    else
        echo 0
    fi
}

function git_changed() {
    git diff --no-ext-diff --quiet --exit-code &> /dev/null
}

function git_clean() {
    local num

    num="$(git status --porcelain 2> /dev/null | wc -l)"

    if [ "$num" -eq 0 ]; then
        return 0
    fi

    return 1
}

function git_staged() {
    local num

    num="$(git diff --name-only --cached 2> /dev/null | wc -l)"

    if [ "$num" -eq 0 ]; then
        return 0
    fi

    return 1
}

function git_diff() {
    local diff_prompt
    local local_prompt
    local branch_prompt
    local ahead
    local behind

    git rev-parse --git-dir &> /dev/null

    # shellcheck disable=SC2181
    if [ "$?" != "0" ]; then
        return 1
    fi

    local diff_prompt=""

    local local_prompt=""
    local branch_prompt=""

    git_clean

    # shellcheck disable=SC2181
    if [ "$?" == "0" ]; then
        local_prompt+="\xE2\x9C\x93"
    fi

    git_changed

    if [ "$?" == "1" ]; then
        local_prompt+="*"
    fi

    git_untracked

    if [ "$?" == "1" ]; then
        local_prompt+="+"
    fi

    git_staged

    if [ "$?" == "1" ]; then
        local_prompt+="\xE2\x97\x8F"
    fi

    ahead="$(git_ahead | tr -d '[:space:]')"

    if [ "$ahead" != "0" ]; then
        branch_prompt+="↑$ahead"
    fi

    behind="$(git_behind | tr -d '[:space:]')"

    if [ "$behind" != "0" ]; then
        branch_prompt+="↓$behind"
    fi

    if [[ ! ${#branch_prompt} -eq 0 ]]; then
        diff_prompt+="$branch_prompt|$local_prompt"
    else
        diff_prompt+="$local_prompt"
    fi

    if [[ ! ${#diff_prompt} -eq 0 ]]; then
        echo -e "[${diff_prompt}]"
    fi
}

# battery

function battery() {
    local battery_pct
    local battery_state
    local battery_color
    local is_laptop
    local output

    # check if laptop

    is_laptop="$(sysctl hw.model | grep 'Book')"

    if [ -z "$is_laptop" ]; then
        return 0
    fi

    battery_pct="$(pmset -g batt | grep -E "([0-9]+\%).*" -o | cut -f1 -d ';' | tr -d '%')"
    battery_state="$(pmset -g batt | grep -E "([0-9]+\%).*" -o | cut -f2 -d ';' | tr -d ' ')"

    if [ "$battery_pct" -le "10" ]; then
        battery_color="$red"
    elif [ "$battery_pct" -le "20" ]; then
        battery_color="$yellow"
    else
        battery_color="$white"
    fi

    if [ "$battery_state" == "charging" ] || [ "$battery_state" == "charged" ]; then
        battery_color="$green"
    fi

    output+="\[${white}\][\[${battery_color}\]${battery_pct}%\[${white}\]]\[${reset}\] "

    echo -e "${output}"
}

# python

function python_env() {
    if [[ -n ${VIRTUAL_ENV-} ]]; then
        echo "(${VIRTUAL_ENV##*/})"
    fi
}

# set prompt

function set_prompt() {
    # capture previous command exit code
    local err=$?

    if [ "$err" != "0" ]; then
        prompt_color="$red"
    else
        prompt_color="$white"
    fi

    # execute previously set prompt command

    eval "$OLD_PROMPT_COMMAND"

    local git_symbols
    local git_name
    local battery_icon
    local venv

    git_name="$(git_branch)"
    git_symbols="$(git_diff)"
    battery_icon="$(battery)"
    venv="$(python_env)"

    PS1="${battery_icon}\[${bold}\]\[${user_color}\]\u\[${reset}\]" # battery, user
    PS1+="\[${white}\] at \[${bold}\]\[${host_color}\]\h\[${reset}\]" # host
    PS1+="\[${white}\] in \[${bold}\]\[${dir_color}\]\w\[${reset}\]" # cwd

    PS1+="${git_name}\[${reset}\]" # git branch
    PS1+=" \[${diff_color}\]${git_symbols}\[${reset}\]" # git diff & pushable commits

    PS1+=" \[${virtualenv_color}\]${venv}\[${reset}\]" # python virtualenv

    PS1+="\n\[${time_color}\](\@) \[${prompt_color}\]$ \[${reset}\]"
}

function exec_prompt() {
    OLD_PROMPT_COMMAND="$PROMPT_COMMAND"
    PROMPT_COMMAND="set_prompt; history -a; history -c; history -r"
}

exec_prompt
