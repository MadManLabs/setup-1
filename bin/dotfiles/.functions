#!/usr/bin/env bash

# functions
# --------

# go list packages
function golist() {
    pkgs=$(go list ... | sed 's#.*/##')

    if [[ -z "$1" ]]; then
        echo "${pkgs[@]}"
    else
        echo "${pkgs[@]}" | /usr/bin/env grep "$1"
    fi
}

# upgrade everything on computer
function update() {
    # homebrew
    command -v brew &> /dev/null

    if [ "$?" == "0" ]; then
        brew update
        brew upgrade --all
        brew prune
        brew cleanup
    fi

    # go
    command -v go &> /dev/null

    if [ "$?" == "0" ]; then
        go get -u all
    fi

    # node.js
    command -v npm &> /dev/null

    if [ "$?" == "0" ]; then
        for pkg in $(npm outdated -g --parseable --depth=0 | cut -d : -f 2); do
            npm install -g "$pkg"
        done
    fi

    # ruby
    command -v gem &> /dev/null

    if [ "$?" == "0" ]; then
        gem update "$(gem outdated | cut -d ' ' -f 1)"
    fi

    # python
    command -v pip &> /dev/null

    if [ "$?" == "0" ]; then
        pip install -U pip

        # shellcheck disable=SC2046
        pip install -U $(pip freeze --local | grep -v ^-e | cut -d = -f 1)
    fi

    # atom
    command -v apm &> /dev/null

    if [ "$?" == "0" ]; then
        apm update
    fi

    # vim
    if [ -d ~/.vim/bundle ]; then
        cd ~/.vim/bundle || exit

        for d in *; do
            cd "$d" || exit
            git pull
            cd .. || exit
        done
    fi

    # mac os
    softwareupdate --install --all
}

# set up default tmux layout: one session, one window, three panes
function mux() {
    if [[ -z "$1" ]]; then
        TMUX_SESSION="work"
    else
        TMUX_SESSION="$1"
    fi

    tmux new-session -s "$TMUX_SESSION" -d
    tmux split-window -h
    tmux split-window -v
    tmux attach-session -t "$TMUX_SESSION"
}

# converts quicktime screen recording to a gif
function mov2gif() {
    usage="usage: mov2gif input output"

    if [ -z "$1" ] || [ -z "$2" ]; then
        echo "$usage"
        return 1
    else
        infile="$1"
        outfile="$2"

        if [ -f "$infile" ]; then
            ffmpeg -hide_banner -loglevel quiet -i "$infile" -s 600x400 -pix_fmt rgb24 -r 10 -f gif - | gifsicle --optimize=3 --delay=3 > "$outfile"
        else
            echo "error: input is not a file"
            return 1
        fi
    fi
}

# starts a python server, with optional port argument
function server() {
    python -m SimpleHTTPServer "${1:-8080}"
}
